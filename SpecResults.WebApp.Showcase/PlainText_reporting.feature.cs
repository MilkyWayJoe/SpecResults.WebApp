// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.2.1
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace SpecResults.WebApp.Showcase
{
	[System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.2.1")]
	[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	[NUnit.Framework.TestFixtureAttribute()]
	[NUnit.Framework.DescriptionAttribute("Plain Text reporting")]
	[NUnit.Framework.CategoryAttribute("Plugin")]
	[NUnit.Framework.CategoryAttribute("Plugin")]
	public partial class PlainTextReportingFeature
	{
		private static TechTalk.SpecFlow.ITestRunner testRunner;

		[NUnit.Framework.TestFixtureSetUpAttribute()]
		public virtual void FeatureSetup()
		{
			testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
			var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
				"Plain Text reporting",
				"Story\r\n=====\r\nIn order to get testresults in plain text format\r\nAs a developer\r\nI" +
				" want to learn about [SpecResults.PlainText](https://www.nuget.org/packag" +
				"es/SpecResults.PlainText/)", ProgrammingLanguage.CSharp, new string[]
				{
					"Plugin",
					"Plugin"
				});
			testRunner.OnFeatureStart(featureInfo);
		}

		[NUnit.Framework.TestFixtureTearDownAttribute()]
		public virtual void FeatureTearDown()
		{
			testRunner.OnFeatureEnd();
			testRunner = null;
		}

		[NUnit.Framework.SetUpAttribute()]
		public virtual void TestInitialize()
		{
		}

		[NUnit.Framework.TearDownAttribute()]
		public virtual void ScenarioTearDown()
		{
			testRunner.OnScenarioEnd();
		}

		public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
		{
			testRunner.OnScenarioStart(scenarioInfo);
		}

		public virtual void ScenarioCleanup()
		{
			testRunner.CollectScenarioErrors();
		}

		[NUnit.Framework.TestAttribute()]
		[NUnit.Framework.DescriptionAttribute("Learn how to install the SpecResults.PlainText package")]
		[NUnit.Framework.CategoryAttribute("Howto:install")]
		public virtual void LearnHowToInstallTheSpecFlow_Reporting_PlainTextPackage()
		{
			var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Learn how to install the SpecResults.PlainText package",
				new string[]
				{
					"Howto:install"
				});
#line 10
			this.ScenarioSetup(scenarioInfo);
#line 11
			testRunner.Given("I\'m on \"http://nuget.org\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 12
			testRunner.When("I enter searchtext \"SpecResults.PlainText\" in \"searchBoxInput\"", ((string) (null)),
				((TechTalk.SpecFlow.Table) (null)), "When ");
#line 13
			testRunner.And("I click the search button \"searchBoxSubmit\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
				"And ");
#line 14
			testRunner.And("I click the result with title \"SpecResults.PlainText\"", ((string) (null)),
				((TechTalk.SpecFlow.Table) (null)), "And ");
#line 15
			testRunner.Then("I can read the instructions on how to install the package", ((string) (null)),
				((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
			this.ScenarioCleanup();
		}
	}
}

#pragma warning restore

#endregion Designer generated code